"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const type_1 = require("./type");
class Field {
    constructor(type, name, flags = 0) {
        this.type = type;
        this.flags = flags;
        this.name = name;
    }
    isOptional() {
        return (this.flags & 1 /* Optional */) !== 0;
    }
    isOmitEmpty() {
        return (this.flags & 2 /* OmitEmpty */) !== 0;
    }
}
exports.Field = Field;
function optional(field) {
    return new Field(field.type, field.name, field.flags | 1 /* Optional */);
}
exports.optional = optional;
function omitEmpty(field) {
    return new Field(field.type, field.name, field.flags | 2 /* OmitEmpty */);
}
exports.omitEmpty = omitEmpty;
function ref(name, schema) {
    return new Field(type_1.REF(schema), name);
}
exports.ref = ref;
function array(name, type, length) {
    return new Field(type_1.ARRAY(type, length), name);
}
exports.array = array;
function map(name, key, value) {
    return new Field(type_1.MAP(key, value), name);
}
exports.map = map;
function oneOf(name, types) {
    return new Field(type_1.ONE_OF(types), name);
}
exports.oneOf = oneOf;
function bool(name) {
    return new Field(type_1.BOOL, name);
}
exports.bool = bool;
function i8(name) {
    return new Field(type_1.I8, name);
}
exports.i8 = i8;
function u8(name) {
    return new Field(type_1.U8, name);
}
exports.u8 = u8;
function i16(name) {
    return new Field(type_1.I16, name);
}
exports.i16 = i16;
function u16(name) {
    return new Field(type_1.U16, name);
}
exports.u16 = u16;
function i32(name) {
    return new Field(type_1.I32, name);
}
exports.i32 = i32;
function u32(name) {
    return new Field(type_1.U32, name);
}
exports.u32 = u32;
function f32(name) {
    return new Field(type_1.F32, name);
}
exports.f32 = f32;
function f64(name) {
    return new Field(type_1.F64, name);
}
exports.f64 = f64;
function ivar(name) {
    return new Field(type_1.IVAR, name);
}
exports.ivar = ivar;
function uvar(name) {
    return new Field(type_1.UVAR, name);
}
exports.uvar = uvar;
function bytes(name, size) {
    return new Field(type_1.BYTES(size), name);
}
exports.bytes = bytes;
function utf8(name) {
    return new Field(type_1.UTF8, name);
}
exports.utf8 = utf8;
function ascii(name, size) {
    return new Field(type_1.ASCII(size), name);
}
exports.ascii = ascii;
//# sourceMappingURL=field.js.map