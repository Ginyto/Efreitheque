import { Type, ArrayTypeProps, MapTypeProps } from "./type";
import { Schema } from "./schema";
export declare const enum FieldFlags {
    Optional = 1,
    OmitEmpty = 2,
}
export declare class Field<T = null> {
    readonly type: Type<T>;
    readonly flags: FieldFlags;
    readonly name: string;
    constructor(type: Type<T>, name: string, flags?: FieldFlags);
    isOptional(): boolean;
    isOmitEmpty(): boolean;
}
export declare function optional<T>(field: Field<T>): Field<T>;
export declare function omitEmpty<T>(field: Field<T>): Field<T>;
export declare function ref(name: string, schema: Schema): Field<Schema>;
export declare function array(name: string, type: Type<any>, length?: number): Field<ArrayTypeProps>;
export declare function map(name: string, key: Type<any>, value: Type<any>): Field<MapTypeProps>;
export declare function oneOf(name: string, types: Type<any>[]): Field<Type<any>[]>;
export declare function bool(name: string): Field;
export declare function i8(name: string): Field;
export declare function u8(name: string): Field;
export declare function i16(name: string): Field;
export declare function u16(name: string): Field;
export declare function i32(name: string): Field;
export declare function u32(name: string): Field;
export declare function f32(name: string): Field;
export declare function f64(name: string): Field;
export declare function ivar(name: string): Field;
export declare function uvar(name: string): Field;
export declare function bytes(name: string, size?: number): Field;
export declare function utf8(name: string): Field;
export declare function ascii(name: string, size?: number): Field;
