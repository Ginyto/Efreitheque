import { Field } from "./field";
export declare const enum SchemaFlags {
    BitSet = 1,
    DynamicSize = 2,
    OptionalFields = 4,
    BooleanFields = 8,
    RegularFields = 16,
}
export declare const enum BitFieldType {
    Optional = 1,
    Boolean = 2,
}
export interface BitField {
    readonly type: BitFieldType;
    readonly field: Field;
}
export interface SchemaDetails {
    readonly flags: SchemaFlags;
    readonly size: number;
    readonly optionalFields: Field[];
    readonly booleanFields: Field[];
    readonly bitSet: BitField[];
}
export declare class Schema {
    readonly name: string;
    readonly fields: Field<any>[];
    readonly flags: SchemaFlags;
    readonly size: number;
    readonly optionalFields: Field[];
    readonly booleanFields: Field[];
    readonly bitSet: BitField[];
    readonly meta: Map<symbol, any>;
    constructor(name: string, fields: Field<any>[], details: SchemaDetails, meta: Map<symbol, any>);
    hasBitSet(): boolean;
    optionalBitSetIndex(field: Field): {
        index: number;
        position: number;
    };
    booleanBitSetIndex(field: Field): {
        index: number;
        position: number;
    };
    hasDynamicSize(): boolean;
    hasOptionalFields(): boolean;
    hasBooleanFields(): boolean;
    hasRegularFields(): boolean;
    bitSetSize(): number;
}
export declare type Fields = Field | RecursiveFieldArray | null;
export interface RecursiveFieldArray extends Array<Fields> {
}
export interface KV<T> {
    key: symbol;
    value: T;
}
export declare function schema(name: string, fields: RecursiveFieldArray, ...meta: KV<any>[]): Schema;
