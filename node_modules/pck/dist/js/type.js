export var TypeId;
(function (TypeId) {
    TypeId[TypeId["Bool"] = 0] = "Bool";
    TypeId[TypeId["Int"] = 1] = "Int";
    TypeId[TypeId["Uint"] = 2] = "Uint";
    TypeId[TypeId["Float"] = 3] = "Float";
    TypeId[TypeId["VarInt"] = 4] = "VarInt";
    TypeId[TypeId["VarUint"] = 5] = "VarUint";
    TypeId[TypeId["Bytes"] = 6] = "Bytes";
    TypeId[TypeId["UTF8"] = 7] = "UTF8";
    TypeId[TypeId["ASCII"] = 8] = "ASCII";
    TypeId[TypeId["Ref"] = 9] = "Ref";
    TypeId[TypeId["Array"] = 10] = "Array";
    TypeId[TypeId["Map"] = 11] = "Map";
    TypeId[TypeId["OneOf"] = 12] = "OneOf";
})(TypeId || (TypeId = {}));
export class Type {
    constructor(id, size, flags, props) {
        this.id = id;
        this.size = size;
        this.flags = flags;
        this.props = props;
    }
    toString() {
        if (this.size > 0) {
            return `<Type: ${TypeId[this.id]}[${this.size}]>`;
        }
        return `<Type: ${TypeId[this.id]}>`;
    }
    hasDynamicSize() {
        return ((this.flags & 1 /* DynamicSize */) !== 0);
    }
    isBoolean() {
        return this.id === TypeId.Bool;
    }
    isFloat() {
        return this.id === TypeId.Float;
    }
    isFixedInteger() {
        return (this.id === TypeId.Int ||
            this.id === TypeId.Uint);
    }
    isVariadicInteger() {
        return (this.id === TypeId.VarInt ||
            this.id === TypeId.VarUint);
    }
    isInteger() {
        return (this.isFixedInteger() ||
            this.isVariadicInteger());
    }
    isNumber() {
        return this.isInteger() || this.isFloat();
    }
    isSignedInteger() {
        return this.id === TypeId.Int || this.id === TypeId.VarInt;
    }
    isUnsignedInteger() {
        return this.id === TypeId.Uint || this.id === TypeId.VarUint;
    }
    isUtf8String() {
        return this.id === TypeId.UTF8;
    }
    isAsciiString() {
        return this.id === TypeId.ASCII;
    }
    isString() {
        return this.id === TypeId.UTF8 || this.id === TypeId.ASCII;
    }
    isByteArray() {
        return this.id === TypeId.Bool;
    }
    isArray() {
        return this.id === TypeId.Array;
    }
    isRef() {
        return this.id === TypeId.Ref;
    }
    isOneOf() {
        return this.id === TypeId.OneOf;
    }
}
const _REFS = new WeakMap();
export function REF(schema) {
    let r = _REFS.get(schema);
    if (r === void 0) {
        let size = schema.size;
        let flags = 0;
        if (schema.hasDynamicSize()) {
            flags |= 1 /* DynamicSize */;
            size = 0;
        }
        _REFS.set(schema, r = new Type(TypeId.Ref, size, flags, schema));
    }
    return r;
}
export function ARRAY(type, length = 0) {
    let size = 0;
    let flags = 0;
    if (length === 0) {
        flags |= 1 /* DynamicSize */;
    }
    else {
        if (type.hasDynamicSize()) {
            flags |= 1 /* DynamicSize */;
        }
        size *= length;
    }
    return new Type(TypeId.Array, size, flags, { length, type });
}
export function MAP(key, value) {
    return new Type(TypeId.Map, 0, 1 /* DynamicSize */, { key, value });
}
export function ONE_OF(types) {
    for (const type of types) {
        if (!type.isRef()) {
            throw new Error("ONE_OF type doesn't work with basic types");
        }
    }
    return new Type(TypeId.OneOf, 0, 1 /* DynamicSize */, types);
}
function t(id, size = 0, flags = 0) {
    return new Type(id, size, flags, null);
}
export const BOOL = t(TypeId.Bool, 0);
export const I8 = t(TypeId.Int, 1);
export const U8 = t(TypeId.Uint, 1);
export const I16 = t(TypeId.Int, 2);
export const U16 = t(TypeId.Uint, 2);
export const I32 = t(TypeId.Int, 4);
export const U32 = t(TypeId.Uint, 4);
export const F32 = t(TypeId.Float, 4);
export const F64 = t(TypeId.Float, 8);
export const IVAR = t(TypeId.VarInt, 0, 1 /* DynamicSize */);
export const UVAR = t(TypeId.VarUint, 0, 1 /* DynamicSize */);
export const UTF8 = t(TypeId.UTF8, 0, 1 /* DynamicSize */);
const _BYTES = t(TypeId.Bytes, 0, 1 /* DynamicSize */);
const _ASCII = t(TypeId.ASCII, 0, 1 /* DynamicSize */);
const _DYNAMIC_BYTES = new Map();
const _DYNAMIC_ASCII = new Map();
export function BYTES(size = 0) {
    if (size === 0) {
        return _BYTES;
    }
    let r = _DYNAMIC_BYTES.get(size);
    if (r === void 0) {
        _DYNAMIC_BYTES.set(size, r = t(TypeId.Bytes, size));
    }
    return r;
}
export function ASCII(size = 0) {
    if (size === 0) {
        return _ASCII;
    }
    let r = _DYNAMIC_ASCII.get(size);
    if (r === void 0) {
        _DYNAMIC_ASCII.set(size, r = t(TypeId.ASCII, size));
    }
    return r;
}
//# sourceMappingURL=type.js.map