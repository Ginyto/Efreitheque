import { ARRAY, MAP, REF, ONE_OF, BOOL, I8, U8, I16, U16, I32, U32, F32, F64, IVAR, UVAR, BYTES, UTF8, ASCII, } from "./type";
export class Field {
    constructor(type, name, flags = 0) {
        this.type = type;
        this.flags = flags;
        this.name = name;
    }
    isOptional() {
        return (this.flags & 1 /* Optional */) !== 0;
    }
    isOmitEmpty() {
        return (this.flags & 2 /* OmitEmpty */) !== 0;
    }
}
export function optional(field) {
    return new Field(field.type, field.name, field.flags | 1 /* Optional */);
}
export function omitEmpty(field) {
    return new Field(field.type, field.name, field.flags | 2 /* OmitEmpty */);
}
export function ref(name, schema) {
    return new Field(REF(schema), name);
}
export function array(name, type, length) {
    return new Field(ARRAY(type, length), name);
}
export function map(name, key, value) {
    return new Field(MAP(key, value), name);
}
export function oneOf(name, types) {
    return new Field(ONE_OF(types), name);
}
export function bool(name) {
    return new Field(BOOL, name);
}
export function i8(name) {
    return new Field(I8, name);
}
export function u8(name) {
    return new Field(U8, name);
}
export function i16(name) {
    return new Field(I16, name);
}
export function u16(name) {
    return new Field(U16, name);
}
export function i32(name) {
    return new Field(I32, name);
}
export function u32(name) {
    return new Field(U32, name);
}
export function f32(name) {
    return new Field(F32, name);
}
export function f64(name) {
    return new Field(F64, name);
}
export function ivar(name) {
    return new Field(IVAR, name);
}
export function uvar(name) {
    return new Field(UVAR, name);
}
export function bytes(name, size) {
    return new Field(BYTES(size), name);
}
export function utf8(name) {
    return new Field(UTF8, name);
}
export function ascii(name, size) {
    return new Field(ASCII(size), name);
}
//# sourceMappingURL=field.js.map